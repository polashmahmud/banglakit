/**
 * ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ï‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶ï‡¶•‡¶æ‡ßü ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßá (‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ì ‡¶™‡ßü‡¶∏‡¶æ ‡¶∏‡¶π)
 * ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
 * convertToBanglaWords(2025.5) -> "‡¶¶‡ßÅ‡¶á ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶Å‡¶ö‡¶ø‡¶∂ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶û‡ßç‡¶ö‡¶æ‡¶∂ ‡¶™‡ßü‡¶∏‡¶æ"
 * convertToBanglaWords(20987.88) -> "‡¶¨‡¶ø‡¶∂ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶®‡ßü ‡¶∂‡¶§ ‡¶∏‡¶æ‡¶§‡¶æ‡¶∂‡¶ø ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶ü‡¶æ‡¶∂‡¶ø ‡¶™‡ßü‡¶∏‡¶æ"
 */

export function convertToBanglaWords(amount: number | string): string {
    const wordsBelowHundred: Record<number, string> = {
        0: "‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø", 1: "‡¶è‡¶ï", 2: "‡¶¶‡ßÅ‡¶á", 3: "‡¶§‡¶ø‡¶®", 4: "‡¶ö‡¶æ‡¶∞", 5: "‡¶™‡¶æ‡¶Å‡¶ö", 6: "‡¶õ‡ßü", 7: "‡¶∏‡¶æ‡¶§", 8: "‡¶Ü‡¶ü", 9: "‡¶®‡ßü",
        10: "‡¶¶‡¶∂", 11: "‡¶è‡¶ó‡¶æ‡¶∞‡ßã", 12: "‡¶¨‡¶æ‡¶∞‡ßã", 13: "‡¶§‡ßá‡¶∞‡ßã", 14: "‡¶ö‡ßå‡¶¶‡ßç‡¶¶", 15: "‡¶™‡¶®‡ßá‡¶∞‡ßã", 16: "‡¶∑‡ßã‡¶≤‡ßã", 17: "‡¶∏‡¶§‡ßá‡¶∞‡ßã",
        18: "‡¶Ü‡¶†‡¶æ‡¶∞‡ßã", 19: "‡¶â‡¶®‡¶ø‡¶∂", 20: "‡¶¨‡¶ø‡¶∂", 21: "‡¶è‡¶ï‡ßÅ‡¶∂", 22: "‡¶¨‡¶æ‡¶á‡¶∂", 23: "‡¶§‡ßá‡¶á‡¶∂", 24: "‡¶ö‡¶¨‡ßç‡¶¨‡¶ø‡¶∂", 25: "‡¶™‡¶Å‡¶ö‡¶ø‡¶∂",
        26: "‡¶õ‡¶æ‡¶¨‡ßç‡¶¨‡¶ø‡¶∂", 27: "‡¶∏‡¶æ‡¶§‡¶æ‡¶∂", 28: "‡¶Ü‡¶ü‡¶æ‡¶∂", 29: "‡¶â‡¶®‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 30: "‡¶§‡¶ø‡¶∞‡¶ø‡¶∂", 31: "‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 32: "‡¶¨‡¶§‡ßç‡¶∞‡¶ø‡¶∂",
        33: "‡¶§‡ßá‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 34: "‡¶ö‡ßå‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 35: "‡¶™‡¶Å‡ßü‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 36: "‡¶õ‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 37: "‡¶∏‡¶æ‡¶Å‡¶á‡¶§‡ßç‡¶∞‡¶ø‡¶∂", 38: "‡¶Ü‡¶ü‡¶§‡ßç‡¶∞‡¶ø‡¶∂",
        39: "‡¶â‡¶®‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 40: "‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 41: "‡¶è‡¶ï‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 42: "‡¶¨‡¶ø‡ßü‡¶æ‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 43: "‡¶§‡ßá‡¶§‡¶æ‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 44: "‡¶ö‡ßÅ‡ßü‡¶æ‡¶≤‡ßç‡¶≤‡¶ø‡¶∂",
        45: "‡¶™‡¶Å‡ßü‡¶§‡¶æ‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 46: "‡¶õ‡ßá‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 47: "‡¶∏‡¶æ‡¶§‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 48: "‡¶Ü‡¶ü‡¶ö‡¶≤‡ßç‡¶≤‡¶ø‡¶∂", 49: "‡¶â‡¶®‡¶™‡¶û‡ßç‡¶ö‡¶æ‡¶∂", 50: "‡¶™‡¶û‡ßç‡¶ö‡¶æ‡¶∂",
        51: "‡¶è‡¶ï‡¶æ‡¶®‡ßç‡¶®", 52: "‡¶¨‡¶æ‡ßü‡¶æ‡¶®‡ßç‡¶®", 53: "‡¶§‡¶ø‡¶™‡ßç‡¶™‡¶æ‡¶®‡ßç‡¶®", 54: "‡¶ö‡ßÅ‡ßü‡¶æ‡¶®‡ßç‡¶®", 55: "‡¶™‡¶û‡ßç‡¶ö‡¶æ‡¶®‡ßç‡¶®", 56: "‡¶õ‡¶æ‡¶™‡ßç‡¶™‡¶æ‡¶®‡ßç‡¶®",
        57: "‡¶∏‡¶æ‡¶§‡¶æ‡¶®‡ßç‡¶®", 58: "‡¶Ü‡¶ü‡¶æ‡¶®‡ßç‡¶®", 59: "‡¶â‡¶®‡¶∑‡¶æ‡¶ü", 60: "‡¶∑‡¶æ‡¶ü", 61: "‡¶è‡¶ï‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 62: "‡¶¨‡¶æ‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 63: "‡¶§‡ßá‡¶∑‡¶ü‡ßç‡¶ü‡¶ø",
        64: "‡¶ö‡ßå‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 65: "‡¶™‡¶Å‡ßü‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 66: "‡¶õ‡ßá‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 67: "‡¶∏‡¶æ‡¶§‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 68: "‡¶Ü‡¶ü‡¶∑‡¶ü‡ßç‡¶ü‡¶ø", 69: "‡¶â‡¶®‡¶∏‡¶§‡ßç‡¶§‡¶∞",
        70: "‡¶∏‡¶§‡ßç‡¶§‡¶∞", 71: "‡¶è‡¶ï‡¶æ‡¶§‡ßç‡¶§‡¶∞", 72: "‡¶¨‡¶æ‡¶π‡¶æ‡¶§‡ßç‡¶§‡¶∞", 73: "‡¶§‡¶ø‡¶π‡¶æ‡¶§‡ßç‡¶§‡¶∞", 74: "‡¶ö‡ßÅ‡ßü‡¶æ‡¶§‡ßç‡¶§‡¶∞", 75: "‡¶™‡¶Å‡¶ö‡¶æ‡¶§‡ßç‡¶§‡¶∞",
        76: "‡¶õ‡¶ø‡ßü‡¶æ‡¶§‡ßç‡¶§‡¶∞", 77: "‡¶∏‡¶æ‡¶§‡¶æ‡¶§‡ßç‡¶§‡¶∞", 78: "‡¶Ü‡¶ü‡¶æ‡¶§‡ßç‡¶§‡¶∞", 79: "‡¶â‡¶®‡¶Ü‡¶∂‡¶ø", 80: "‡¶Ü‡¶∂‡¶ø", 81: "‡¶è‡¶ï‡¶æ‡¶∂‡¶ø", 82: "‡¶¨‡¶ø‡¶∞‡¶æ‡¶∂‡¶ø",
        83: "‡¶§‡¶ø‡¶∞‡¶æ‡¶∂‡¶ø", 84: "‡¶ö‡ßÅ‡¶∞‡¶æ‡¶∂‡¶ø", 85: "‡¶™‡¶Å‡¶ö‡¶æ‡¶∂‡¶ø", 86: "‡¶õ‡¶ø‡ßü‡¶æ‡¶∂‡¶ø", 87: "‡¶∏‡¶æ‡¶§‡¶æ‡¶∂‡¶ø", 88: "‡¶Ü‡¶ü‡¶æ‡¶∂‡¶ø", 89: "‡¶â‡¶®‡¶®‡¶¨‡ßç‡¶¨‡¶á",
        90: "‡¶®‡¶¨‡ßç‡¶¨‡¶á", 91: "‡¶è‡¶ï‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 92: "‡¶¨‡¶ø‡¶∞‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 93: "‡¶§‡¶ø‡¶∞‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 94: "‡¶ö‡ßÅ‡¶∞‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 95: "‡¶™‡¶Å‡¶ö‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á",
        96: "‡¶õ‡¶ø‡ßü‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 97: "‡¶∏‡¶æ‡¶§‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 98: "‡¶Ü‡¶ü‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á", 99: "‡¶®‡¶ø‡¶∞‡¶æ‡¶®‡¶¨‡ßç‡¶¨‡¶á"
    };

    const numberToWords = (num: number): string => {
        if (num === 0) return "‡¶∂‡ßÇ‡¶®‡ßç‡¶Ø";
        if (num < 100) return wordsBelowHundred[num];

        let result: string[] = [];

        const crore = Math.floor(num / 10000000);
        const lakh = Math.floor((num % 10000000) / 100000);
        const thousand = Math.floor((num % 100000) / 1000);
        const hundred = Math.floor((num % 1000) / 100);
        const rest = num % 100;

        if (crore) result.push(numberToWords(crore) + " ‡¶ï‡ßã‡¶ü‡¶ø");
        if (lakh) result.push(numberToWords(lakh) + " ‡¶≤‡¶ï‡ßç‡¶∑");
        if (thousand) result.push(numberToWords(thousand) + " ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞");
        if (hundred) result.push(wordsBelowHundred[hundred] + " ‡¶∂‡¶§");
        if (rest) result.push(wordsBelowHundred[rest]);

        return result.join(" ").trim();
    };

    // ü™ô ‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ì ‡¶™‡ßü‡¶∏‡¶æ‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡¶æ
    const [takaPart, poishaPartRaw] = amount.toString().split(".");

    const taka = parseInt(takaPart, 10);
    let words = `${numberToWords(taka)} ‡¶ü‡¶æ‡¶ï‡¶æ`;

    if (poishaPartRaw) {
        // ‡¶†‡¶ø‡¶ï ‡¶¶‡ßÅ‡¶á ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶®‡¶æ‡¶ì (‡¶Ø‡ßá‡¶Æ‡¶® 5 ‚Üí 50, 05 ‚Üí 5)
        let poishaFixed = poishaPartRaw.padEnd(2, "0").slice(0, 2);
        const poisha = parseInt(poishaFixed, 10);

        if (poisha > 0) {
            words += ` ${numberToWords(poisha)} ‡¶™‡ßü‡¶∏‡¶æ`;
        }
    }

    return words.trim();
}
